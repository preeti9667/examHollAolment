// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id               String         @id @default(uuid())
  name             String?
  email            String?
  phone_number     String?
  country_code     String?
  institution_type String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  address          user_address[]
  is_active        Boolean        @default(true)
  is_deleted       Boolean        @default(false)
  booking          booking[]

  @@index([email])
  @@index([country_code, phone_number])
}

model auth_otp {
  id           String   @id @default(uuid())
  otp          String
  user_id      String?
  phone_number String?
  country_code String?
  email        String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model auth {
  id            String          @id @default(uuid())
  phone_number  String?
  country_code  String?
  email         String?
  is_active     Boolean         @default(true)
  is_deleted    Boolean         @default(false)
  type          AccountType     @default(CUSTOMER)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  login_history login_history[]

  @@index([country_code, phone_number])
  @@index([email])
}

model login_history {
  id         String   @id @default(uuid())
  is_active  Boolean  @default(true)
  auth_user  auth?    @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model user_address {
  id           String   @id @default(uuid())
  house_no     String?
  street       String?
  address_line String?
  pincode      String
  city         String
  state        String
  user         user?    @relation(fields: [user_id], references: [id])
  user_id      String
  is_default   Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@index([user_id])
}

enum AccountType {
  ADMIN
  CUSTOMER
}

model hall {
  id            String         @id @default(uuid())
  display_id    String         @unique()
  name          String
  group_name    String
  capacity      Int
  slots         String[]
  add_ons       add_on[]       @relation("hall_add_ons")
  add_on_ids    String[]
  is_active     Boolean        @default(true)
  is_deleted    Boolean        @default(false)
  booking_count Int            @default(0)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  booking_hall  booking_hall[]
}

model add_on {
  id             String           @id @default(uuid())
  display_id     String
  name           String
  type           AddOnType        @default(SECURITY)
  price          Int
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  booking_add_on booking_add_on[]
  hall           hall[]           @relation("hall_add_ons")
}

enum AddOnType {
  SURVEILLANCE
  SECURITY
  FACE_RECOGINATION
}

model time_slot {
  id         String   @id @default(uuid())
  from       Float
  to         Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([from, to])
}

model exam {
  id               String   @id @default(uuid())
  display_id       String
  name             String
  start_date       DateTime
  end_date         DateTime
  time_slot_ids    String[]
  no_of_condidates Int
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model booking {
  id             String           @id @default(uuid())
  display_id     String           @unique()
  user           user?            @relation(fields: [user_id], references: [id])
  user_id        String
  halls          Json?
  hall_ids       String[]
  exam_name      String
  total_cost     Float
  from           DateTime
  to             DateTime
  time_slots     Json?
  time_slots_ids String[]
  address        Json?
  payment_method PaymentMethod
  status         BookingStatus    @default(DRAFT)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  booking_add_on booking_add_on[]
  booking_hall   booking_hall[]

  @@index([user_id])
}

model booking_hall {
  id          String   @id @default(uuid())
  booking     booking  @relation(fields: [booking_id], references: [id])
  booking_id  String
  hall        hall     @relation(fields: [hall_id], references: [id])
  hall_id     String
  quantity    Int
  total_price Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([booking_id])
}

model booking_add_on {
  id          String   @id @default(uuid())
  booking     booking  @relation(fields: [booking_id], references: [id])
  booking_id  String
  add_on      add_on   @relation(fields: [add_on_id], references: [id])
  add_on_id   String
  quantity    Int
  total_price Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([booking_id])
}

enum BookingStatus {
  APPROVED
  CANCELLED
  FAILED
  DRAFT
}

enum PaymentMethod {
  CASH
  GATEWAY
  UPI
  CARD
}

model role {
  id          String   @id @default(uuid())
  display_id  String   @unique()
  name        String   @unique() @default("SUPER_ADMIN")
  is_super    Boolean  @default(false)
  permissions Json
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  admin       admin[]
}

model admin {
  id           String   @id @default(uuid())
  display_id   String   @unique()
  name         String
  role         role     @relation(fields: [role_id], references: [id])
  role_id      String
  email        String?
  phone_number String?
  country_code String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@index([phone_number, country_code])
  @@index([email])
}
