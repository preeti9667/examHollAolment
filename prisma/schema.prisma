// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  displayId   String        @default("USR")
  name        String?
  email       String?
  phoneNumber String?
  countryCode String?
  bio         String?
  gstNo       String?
  isActive    Boolean       @default(true)
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  address     UserAddress[]
  booking     Booking[]

  @@index([email])
  @@index([countryCode, phoneNumber])
}

model AuthOtp {
  id          String   @id @default(uuid())
  otp         String
  userId      String?
  phoneNumber String?
  countryCode String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Auth {
  id           String         @id @default(uuid())
  phoneNumber  String?
  countryCode  String?
  email        String?
  isActive     Boolean        @default(true)
  isDeleted    Boolean        @default(false)
  type         AccountType    @default(CUSTOMER)
  roleId       String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  loginHistory LoginHistory[]

  @@index([countryCode, phoneNumber])
  @@index([email])
}

model LoginHistory {
  id        String   @id @default(uuid())
  isActive  Boolean  @default(true)
  authUser  Auth?    @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserAddress {
  id          String   @id @default(uuid())
  houseNo     String?
  street      String?
  addressLine String?
  pincode     String
  city        String
  state       String
  user        User?    @relation(fields: [userId], references: [id])
  userId      String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

enum AccountType {
  ADMIN
  CUSTOMER
}

model Hall {
  id           String         @id @default(uuid())
  displayId    String         @unique()
  name         String
  groupName    String
  capacity     Int
  price        Int            @default(0)
  slots        String[]
  addOnIds     String[]
  isActive     Boolean        @default(true)
  isDeleted    Boolean        @default(false)
  bookingCount Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  bookingHall  BookingHall[]
  HallAddOn    HallAddOn[]
  HallTimeSlot HallTimeSlot[]
}

model AddOn {
  id           String         @id @default(uuid())
  displayId    String
  name         String
  type         String         @default("SECURITY")
  price        Int
  isActive     Boolean        @default(true)
  isDeleted    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  bookingAddOn BookingAddOn[]
  HallAddOn    HallAddOn[]
}

model HallTimeSlot {
  hall       Hall?     @relation(fields: [hallId], references: [id])
  hallId     String
  timeSlot   TimeSlot? @relation(fields: [timeSlotId], references: [id])
  timeSlotId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@id([hallId, timeSlotId])
}

model HallAddOn {
  hall      Hall?    @relation(fields: [hallId], references: [id])
  hallId    String
  addOn     AddOn?   @relation(fields: [addOnId], references: [id])
  addOnId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([hallId, addOnId])
}

model TimeSlot {
  id           String         @id @default(uuid())
  from         Float
  to           Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  BookingHall  BookingHall[]
  hallId       String?
  hallTimeSlot HallTimeSlot[]
  offDate      OffDate[]

  @@unique([from, to])
}

model Exam {
  id             String   @id @default(uuid())
  displayId      String
  name           String
  startDate      DateTime
  endDate        DateTime
  timeSlotIds    String[]
  noOfCandidates Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Booking {
  id               String         @id @default(uuid())
  displayId        String         @unique()
  user             User?          @relation(fields: [userId], references: [id])
  userId           String
  halls            Json?
  hallIds          String[]       @default([])
  noOfCandidates   Int            @default(0)
  hallAllocated    Int            @default(0)
  examName         String?
  organizationName String?
  institutionType  String?
  applicantName    String?
  totalCost        Float          @default(0)
  startDate        DateTime?
  endDate          DateTime?
  timeSlots        Json?
  timeSlotIds      String[]       @default([])
  address          Json?
  contact          Json?
  paymentMethod    String?
  status           Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  bookingAddOn     BookingAddOn[]
  bookingHall      BookingHall[]
  payment          Payment[]

  @@index([userId])
}

model BookingHall {
  id             String    @id @default(uuid())
  booking        Booking?  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId      String
  hall           Hall?     @relation(fields: [hallId], references: [id])
  hallId         String
  timeSlot       TimeSlot? @relation(fields: [timeSlotId], references: [id])
  timeSlotId     String
  seatsAllocated Int       @default(0)
  totalPrice     Float
  hallRaw        Json?
  slotRaw        Json?
  date           DateTime?
  status         Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([bookingId, hallId])
}

model BookingAddOn {
  id         String   @id @default(uuid())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  String
  addOn      AddOn    @relation(fields: [addOnId], references: [id])
  addOnId    String
  quantity   Int
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([bookingId])
}

model Payment {
  id            String    @id @default(uuid())
  booking       Booking   @relation(fields: [bookingId], references: [id])
  bookingId     String
  transactionId String    @unique()
  sabpaisaTxnId String?
  amount        Float
  status        String
  paidAmount    Float?
  paymentMode   String?
  transDate     DateTime?
  currency      String    @default("INR")
  transaction   Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  displayId   String   @unique()
  name        String   @unique() @default("SUPER_ADMIN")
  isSuper     Boolean  @default(false)
  permissions Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  admin       Admin[]
}

model Admin {
  id          String   @id @default(uuid())
  displayId   String   @unique()
  name        String
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      String
  email       String
  phoneNumber String
  countryCode String
  isActive    Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([phoneNumber, countryCode])
  @@index([email])
}

model OffDate {
  id         String    @id @default(uuid())
  timeSlot   TimeSlot? @relation(fields: [timeSlotId], references: [id])
  timeSlotId String
  date       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
